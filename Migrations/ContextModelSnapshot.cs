// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RegistroNotasApi.Models;

#nullable disable

namespace RegistroNotasApi.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RegistroNotasApi.Models.Alternatives", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("alternative1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("alternative2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("alternative3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("alternative4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("alternative5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("questionId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("questionId");

                    b.ToTable("alternatives");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Answer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("questionId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("questionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Chapter", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.ToTable("chapters");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Course", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.CourseRegistration", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("registrationId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("registrationId");

                    b.ToTable("courseRegistrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Exam", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("chapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("score")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("chapterId");

                    b.ToTable("exams");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Facultad", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("facultads");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.PS", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("facultadId")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("facultadId");

                    b.ToTable("ps");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Question", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("examId")
                        .HasColumnType("bigint");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("examId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Registration", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("psId")
                        .HasColumnType("bigint");

                    b.Property<long>("semesterId")
                        .HasColumnType("bigint");

                    b.Property<long>("studentId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("psId");

                    b.HasIndex("semesterId");

                    b.HasIndex("studentId");

                    b.ToTable("registrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Semester", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("initDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("semesters");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Student", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("age")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("students");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Teacher", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("age")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.TeacherCourse", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("courseId")
                        .HasColumnType("bigint");

                    b.Property<long>("teacherId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("courseId");

                    b.HasIndex("teacherId");

                    b.ToTable("teacherCourses");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Alternatives", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Question", "question")
                        .WithMany("alternatives")
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Answer", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Question", "question")
                        .WithMany("answers")
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Chapter", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Course", "course")
                        .WithMany("chapters")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.CourseRegistration", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Course", "course")
                        .WithMany("courseRegistrations")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistroNotasApi.Models.Registration", "registration")
                        .WithMany("courseRegistrations")
                        .HasForeignKey("registrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("registration");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Exam", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Chapter", "chapter")
                        .WithMany("exams")
                        .HasForeignKey("chapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chapter");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.PS", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Facultad", "facultad")
                        .WithMany("pSs")
                        .HasForeignKey("facultadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("facultad");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Question", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Exam", "exam")
                        .WithMany("questions")
                        .HasForeignKey("examId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("exam");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Registration", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.PS", "pS")
                        .WithMany("registrations")
                        .HasForeignKey("psId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistroNotasApi.Models.Semester", "semester")
                        .WithMany("registrations")
                        .HasForeignKey("semesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistroNotasApi.Models.Student", "student")
                        .WithMany("registrations")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pS");

                    b.Navigation("semester");

                    b.Navigation("student");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.TeacherCourse", b =>
                {
                    b.HasOne("RegistroNotasApi.Models.Course", "course")
                        .WithMany("teacherCourses")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistroNotasApi.Models.Teacher", "teacher")
                        .WithMany("teacherCourses")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Chapter", b =>
                {
                    b.Navigation("exams");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Course", b =>
                {
                    b.Navigation("chapters");

                    b.Navigation("courseRegistrations");

                    b.Navigation("teacherCourses");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Exam", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Facultad", b =>
                {
                    b.Navigation("pSs");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.PS", b =>
                {
                    b.Navigation("registrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Question", b =>
                {
                    b.Navigation("alternatives");

                    b.Navigation("answers");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Registration", b =>
                {
                    b.Navigation("courseRegistrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Semester", b =>
                {
                    b.Navigation("registrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Student", b =>
                {
                    b.Navigation("registrations");
                });

            modelBuilder.Entity("RegistroNotasApi.Models.Teacher", b =>
                {
                    b.Navigation("teacherCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
